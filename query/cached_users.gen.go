// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"elsenova/models"
)

func newCachedUser(db *gorm.DB, opts ...gen.DOOption) cachedUser {
	_cachedUser := cachedUser{}

	_cachedUser.cachedUserDo.UseDB(db, opts...)
	_cachedUser.cachedUserDo.UseModel(&models.CachedUser{})

	tableName := _cachedUser.cachedUserDo.TableName()
	_cachedUser.ALL = field.NewAsterisk(tableName)
	_cachedUser.ID = field.NewString(tableName, "id")
	_cachedUser.CreatedAt = field.NewTime(tableName, "created_at")
	_cachedUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cachedUser.DeletedAt = field.NewField(tableName, "deleted_at")
	_cachedUser.Email = field.NewString(tableName, "email")
	_cachedUser.Username = field.NewString(tableName, "username")
	_cachedUser.Avatar = field.NewString(tableName, "avatar")
	_cachedUser.Locale = field.NewString(tableName, "locale")
	_cachedUser.Discriminator = field.NewString(tableName, "discriminator")
	_cachedUser.Token = field.NewString(tableName, "token")
	_cachedUser.Verified = field.NewBool(tableName, "verified")
	_cachedUser.MFAEnabled = field.NewBool(tableName, "mfa_enabled")
	_cachedUser.Banner = field.NewString(tableName, "banner")
	_cachedUser.AccentColor = field.NewInt(tableName, "accent_color")
	_cachedUser.Bot = field.NewBool(tableName, "bot")
	_cachedUser.PublicFlags = field.NewInt(tableName, "public_flags")
	_cachedUser.PremiumType = field.NewInt(tableName, "premium_type")
	_cachedUser.System = field.NewBool(tableName, "system")
	_cachedUser.Flags = field.NewInt(tableName, "flags")

	_cachedUser.fillFieldMap()

	return _cachedUser
}

type cachedUser struct {
	cachedUserDo

	ALL           field.Asterisk
	ID            field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Email         field.String
	Username      field.String
	Avatar        field.String
	Locale        field.String
	Discriminator field.String
	Token         field.String
	Verified      field.Bool
	MFAEnabled    field.Bool
	Banner        field.String
	AccentColor   field.Int
	Bot           field.Bool
	PublicFlags   field.Int
	PremiumType   field.Int
	System        field.Bool
	Flags         field.Int

	fieldMap map[string]field.Expr
}

func (c cachedUser) Table(newTableName string) *cachedUser {
	c.cachedUserDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cachedUser) As(alias string) *cachedUser {
	c.cachedUserDo.DO = *(c.cachedUserDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cachedUser) updateTableName(table string) *cachedUser {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Email = field.NewString(table, "email")
	c.Username = field.NewString(table, "username")
	c.Avatar = field.NewString(table, "avatar")
	c.Locale = field.NewString(table, "locale")
	c.Discriminator = field.NewString(table, "discriminator")
	c.Token = field.NewString(table, "token")
	c.Verified = field.NewBool(table, "verified")
	c.MFAEnabled = field.NewBool(table, "mfa_enabled")
	c.Banner = field.NewString(table, "banner")
	c.AccentColor = field.NewInt(table, "accent_color")
	c.Bot = field.NewBool(table, "bot")
	c.PublicFlags = field.NewInt(table, "public_flags")
	c.PremiumType = field.NewInt(table, "premium_type")
	c.System = field.NewBool(table, "system")
	c.Flags = field.NewInt(table, "flags")

	c.fillFieldMap()

	return c
}

func (c *cachedUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cachedUser) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 19)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["email"] = c.Email
	c.fieldMap["username"] = c.Username
	c.fieldMap["avatar"] = c.Avatar
	c.fieldMap["locale"] = c.Locale
	c.fieldMap["discriminator"] = c.Discriminator
	c.fieldMap["token"] = c.Token
	c.fieldMap["verified"] = c.Verified
	c.fieldMap["mfa_enabled"] = c.MFAEnabled
	c.fieldMap["banner"] = c.Banner
	c.fieldMap["accent_color"] = c.AccentColor
	c.fieldMap["bot"] = c.Bot
	c.fieldMap["public_flags"] = c.PublicFlags
	c.fieldMap["premium_type"] = c.PremiumType
	c.fieldMap["system"] = c.System
	c.fieldMap["flags"] = c.Flags
}

func (c cachedUser) clone(db *gorm.DB) cachedUser {
	c.cachedUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cachedUser) replaceDB(db *gorm.DB) cachedUser {
	c.cachedUserDo.ReplaceDB(db)
	return c
}

type cachedUserDo struct{ gen.DO }

type ICachedUserDo interface {
	gen.SubQuery
	Debug() ICachedUserDo
	WithContext(ctx context.Context) ICachedUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICachedUserDo
	WriteDB() ICachedUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICachedUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICachedUserDo
	Not(conds ...gen.Condition) ICachedUserDo
	Or(conds ...gen.Condition) ICachedUserDo
	Select(conds ...field.Expr) ICachedUserDo
	Where(conds ...gen.Condition) ICachedUserDo
	Order(conds ...field.Expr) ICachedUserDo
	Distinct(cols ...field.Expr) ICachedUserDo
	Omit(cols ...field.Expr) ICachedUserDo
	Join(table schema.Tabler, on ...field.Expr) ICachedUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICachedUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICachedUserDo
	Group(cols ...field.Expr) ICachedUserDo
	Having(conds ...gen.Condition) ICachedUserDo
	Limit(limit int) ICachedUserDo
	Offset(offset int) ICachedUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICachedUserDo
	Unscoped() ICachedUserDo
	Create(values ...*models.CachedUser) error
	CreateInBatches(values []*models.CachedUser, batchSize int) error
	Save(values ...*models.CachedUser) error
	First() (*models.CachedUser, error)
	Take() (*models.CachedUser, error)
	Last() (*models.CachedUser, error)
	Find() ([]*models.CachedUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.CachedUser, err error)
	FindInBatches(result *[]*models.CachedUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.CachedUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICachedUserDo
	Assign(attrs ...field.AssignExpr) ICachedUserDo
	Joins(fields ...field.RelationField) ICachedUserDo
	Preload(fields ...field.RelationField) ICachedUserDo
	FirstOrInit() (*models.CachedUser, error)
	FirstOrCreate() (*models.CachedUser, error)
	FindByPage(offset int, limit int) (result []*models.CachedUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICachedUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cachedUserDo) Debug() ICachedUserDo {
	return c.withDO(c.DO.Debug())
}

func (c cachedUserDo) WithContext(ctx context.Context) ICachedUserDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cachedUserDo) ReadDB() ICachedUserDo {
	return c.Clauses(dbresolver.Read)
}

func (c cachedUserDo) WriteDB() ICachedUserDo {
	return c.Clauses(dbresolver.Write)
}

func (c cachedUserDo) Session(config *gorm.Session) ICachedUserDo {
	return c.withDO(c.DO.Session(config))
}

func (c cachedUserDo) Clauses(conds ...clause.Expression) ICachedUserDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cachedUserDo) Returning(value interface{}, columns ...string) ICachedUserDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cachedUserDo) Not(conds ...gen.Condition) ICachedUserDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cachedUserDo) Or(conds ...gen.Condition) ICachedUserDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cachedUserDo) Select(conds ...field.Expr) ICachedUserDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cachedUserDo) Where(conds ...gen.Condition) ICachedUserDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cachedUserDo) Order(conds ...field.Expr) ICachedUserDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cachedUserDo) Distinct(cols ...field.Expr) ICachedUserDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cachedUserDo) Omit(cols ...field.Expr) ICachedUserDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cachedUserDo) Join(table schema.Tabler, on ...field.Expr) ICachedUserDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cachedUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICachedUserDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cachedUserDo) RightJoin(table schema.Tabler, on ...field.Expr) ICachedUserDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cachedUserDo) Group(cols ...field.Expr) ICachedUserDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cachedUserDo) Having(conds ...gen.Condition) ICachedUserDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cachedUserDo) Limit(limit int) ICachedUserDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cachedUserDo) Offset(offset int) ICachedUserDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cachedUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICachedUserDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cachedUserDo) Unscoped() ICachedUserDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cachedUserDo) Create(values ...*models.CachedUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cachedUserDo) CreateInBatches(values []*models.CachedUser, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cachedUserDo) Save(values ...*models.CachedUser) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cachedUserDo) First() (*models.CachedUser, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.CachedUser), nil
	}
}

func (c cachedUserDo) Take() (*models.CachedUser, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.CachedUser), nil
	}
}

func (c cachedUserDo) Last() (*models.CachedUser, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.CachedUser), nil
	}
}

func (c cachedUserDo) Find() ([]*models.CachedUser, error) {
	result, err := c.DO.Find()
	return result.([]*models.CachedUser), err
}

func (c cachedUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.CachedUser, err error) {
	buf := make([]*models.CachedUser, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cachedUserDo) FindInBatches(result *[]*models.CachedUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cachedUserDo) Attrs(attrs ...field.AssignExpr) ICachedUserDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cachedUserDo) Assign(attrs ...field.AssignExpr) ICachedUserDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cachedUserDo) Joins(fields ...field.RelationField) ICachedUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cachedUserDo) Preload(fields ...field.RelationField) ICachedUserDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cachedUserDo) FirstOrInit() (*models.CachedUser, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.CachedUser), nil
	}
}

func (c cachedUserDo) FirstOrCreate() (*models.CachedUser, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.CachedUser), nil
	}
}

func (c cachedUserDo) FindByPage(offset int, limit int) (result []*models.CachedUser, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cachedUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cachedUserDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cachedUserDo) Delete(models ...*models.CachedUser) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cachedUserDo) withDO(do gen.Dao) *cachedUserDo {
	c.DO = *do.(*gen.DO)
	return c
}
