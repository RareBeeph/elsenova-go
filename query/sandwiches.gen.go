// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"elsenova/models"
)

func newSandwich(db *gorm.DB, opts ...gen.DOOption) sandwich {
	_sandwich := sandwich{}

	_sandwich.sandwichDo.UseDB(db, opts...)
	_sandwich.sandwichDo.UseModel(&models.Sandwich{})

	tableName := _sandwich.sandwichDo.TableName()
	_sandwich.ALL = field.NewAsterisk(tableName)
	_sandwich.ID = field.NewUint(tableName, "id")
	_sandwich.CreatedAt = field.NewTime(tableName, "created_at")
	_sandwich.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sandwich.DeletedAt = field.NewField(tableName, "deleted_at")
	_sandwich.Name = field.NewString(tableName, "name")
	_sandwich.IsSandwich = field.NewBool(tableName, "is_sandwich")

	_sandwich.fillFieldMap()

	return _sandwich
}

type sandwich struct {
	sandwichDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	Name       field.String
	IsSandwich field.Bool

	fieldMap map[string]field.Expr
}

func (s sandwich) Table(newTableName string) *sandwich {
	s.sandwichDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sandwich) As(alias string) *sandwich {
	s.sandwichDo.DO = *(s.sandwichDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sandwich) updateTableName(table string) *sandwich {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Name = field.NewString(table, "name")
	s.IsSandwich = field.NewBool(table, "is_sandwich")

	s.fillFieldMap()

	return s
}

func (s *sandwich) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sandwich) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["is_sandwich"] = s.IsSandwich
}

func (s sandwich) clone(db *gorm.DB) sandwich {
	s.sandwichDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sandwich) replaceDB(db *gorm.DB) sandwich {
	s.sandwichDo.ReplaceDB(db)
	return s
}

type sandwichDo struct{ gen.DO }

type ISandwichDo interface {
	gen.SubQuery
	Debug() ISandwichDo
	WithContext(ctx context.Context) ISandwichDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISandwichDo
	WriteDB() ISandwichDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISandwichDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISandwichDo
	Not(conds ...gen.Condition) ISandwichDo
	Or(conds ...gen.Condition) ISandwichDo
	Select(conds ...field.Expr) ISandwichDo
	Where(conds ...gen.Condition) ISandwichDo
	Order(conds ...field.Expr) ISandwichDo
	Distinct(cols ...field.Expr) ISandwichDo
	Omit(cols ...field.Expr) ISandwichDo
	Join(table schema.Tabler, on ...field.Expr) ISandwichDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISandwichDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISandwichDo
	Group(cols ...field.Expr) ISandwichDo
	Having(conds ...gen.Condition) ISandwichDo
	Limit(limit int) ISandwichDo
	Offset(offset int) ISandwichDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISandwichDo
	Unscoped() ISandwichDo
	Create(values ...*models.Sandwich) error
	CreateInBatches(values []*models.Sandwich, batchSize int) error
	Save(values ...*models.Sandwich) error
	First() (*models.Sandwich, error)
	Take() (*models.Sandwich, error)
	Last() (*models.Sandwich, error)
	Find() ([]*models.Sandwich, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Sandwich, err error)
	FindInBatches(result *[]*models.Sandwich, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Sandwich) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISandwichDo
	Assign(attrs ...field.AssignExpr) ISandwichDo
	Joins(fields ...field.RelationField) ISandwichDo
	Preload(fields ...field.RelationField) ISandwichDo
	FirstOrInit() (*models.Sandwich, error)
	FirstOrCreate() (*models.Sandwich, error)
	FindByPage(offset int, limit int) (result []*models.Sandwich, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISandwichDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sandwichDo) Debug() ISandwichDo {
	return s.withDO(s.DO.Debug())
}

func (s sandwichDo) WithContext(ctx context.Context) ISandwichDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sandwichDo) ReadDB() ISandwichDo {
	return s.Clauses(dbresolver.Read)
}

func (s sandwichDo) WriteDB() ISandwichDo {
	return s.Clauses(dbresolver.Write)
}

func (s sandwichDo) Session(config *gorm.Session) ISandwichDo {
	return s.withDO(s.DO.Session(config))
}

func (s sandwichDo) Clauses(conds ...clause.Expression) ISandwichDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sandwichDo) Returning(value interface{}, columns ...string) ISandwichDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sandwichDo) Not(conds ...gen.Condition) ISandwichDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sandwichDo) Or(conds ...gen.Condition) ISandwichDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sandwichDo) Select(conds ...field.Expr) ISandwichDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sandwichDo) Where(conds ...gen.Condition) ISandwichDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sandwichDo) Order(conds ...field.Expr) ISandwichDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sandwichDo) Distinct(cols ...field.Expr) ISandwichDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sandwichDo) Omit(cols ...field.Expr) ISandwichDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sandwichDo) Join(table schema.Tabler, on ...field.Expr) ISandwichDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sandwichDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISandwichDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sandwichDo) RightJoin(table schema.Tabler, on ...field.Expr) ISandwichDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sandwichDo) Group(cols ...field.Expr) ISandwichDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sandwichDo) Having(conds ...gen.Condition) ISandwichDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sandwichDo) Limit(limit int) ISandwichDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sandwichDo) Offset(offset int) ISandwichDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sandwichDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISandwichDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sandwichDo) Unscoped() ISandwichDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sandwichDo) Create(values ...*models.Sandwich) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sandwichDo) CreateInBatches(values []*models.Sandwich, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sandwichDo) Save(values ...*models.Sandwich) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sandwichDo) First() (*models.Sandwich, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Sandwich), nil
	}
}

func (s sandwichDo) Take() (*models.Sandwich, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Sandwich), nil
	}
}

func (s sandwichDo) Last() (*models.Sandwich, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Sandwich), nil
	}
}

func (s sandwichDo) Find() ([]*models.Sandwich, error) {
	result, err := s.DO.Find()
	return result.([]*models.Sandwich), err
}

func (s sandwichDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Sandwich, err error) {
	buf := make([]*models.Sandwich, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sandwichDo) FindInBatches(result *[]*models.Sandwich, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sandwichDo) Attrs(attrs ...field.AssignExpr) ISandwichDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sandwichDo) Assign(attrs ...field.AssignExpr) ISandwichDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sandwichDo) Joins(fields ...field.RelationField) ISandwichDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sandwichDo) Preload(fields ...field.RelationField) ISandwichDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sandwichDo) FirstOrInit() (*models.Sandwich, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Sandwich), nil
	}
}

func (s sandwichDo) FirstOrCreate() (*models.Sandwich, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Sandwich), nil
	}
}

func (s sandwichDo) FindByPage(offset int, limit int) (result []*models.Sandwich, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sandwichDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sandwichDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sandwichDo) Delete(models ...*models.Sandwich) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sandwichDo) withDO(do gen.Dao) *sandwichDo {
	s.DO = *do.(*gen.DO)
	return s
}
